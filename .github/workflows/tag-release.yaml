# Name:        tag-release.yaml
# Author:      Mathew Fleisch <mathew.fleisch@gmail.com>
# Description: This action will build and push a docker container, when triggered by
#              pushing a new git tag (that starts with the letter 'v').
name: Release discord-loudbot
on:
  push:
    tags:
      - 'v*'
jobs:
  build:
    name: Release discord-loudbot
    runs-on: ubuntu-latest
    #runs-on: self-hosted
    steps:
      - uses: actions/checkout@v2
      - name: "Release discord-loudbot"
        env:
          REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
          REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
          GIT_TOKEN: ${{ secrets.GIT_TOKEN }}
        run: |
          echo "This action will build and push a docker container, when triggered by pushing a new git tag (that starts with the letter 'v')."
          echo "Check environment variables are set..."
          REGISTRY_URL=docker.io
          REGISTRY_APPNAME=mathewfleisch/discord-loudbot
          expected="REGISTRY_USERNAME REGISTRY_PASSWORD REGISTRY_URL REGISTRY_APPNAME GIT_TOKEN"
          for expect in $expected; do
            if [[ -z "${!expect}" ]]; then
              echo "Missing Github Secret: $expect"
              echo "See read-me about automation to set this up in your fork"
              exit 1
            fi
          done
          # Fetch all tags and set most recent as a variable
          git fetch --prune --unshallow
          tag=$(git describe --tags)
          # Get commit message for selected tag
          commit_message="$(git for-each-ref refs/tags/$tag --format='%(contents)' | head -n1)"
          # Container registry credentials stored as environment variables from github secrets
          # Build Dockerfile and use git tag as docker tag
          echo "Build docker container"
          docker build -t discord-loudbot-local .
          echo "Creating git release..."
          # Build json with tag + commit message
          curl_data='{"tag_name": "'$tag'", "target_commitish": "main", "name": "discord-loudbot-'$tag'", "body": "'$commit_message'", "draft": false, "prerelease": false}'
          # Sanity check (does json render through jq)
          echo "Data: $curl_data"
          echo "$curl_data" | jq '.'
          # Build, print and execute curl to create a new release with the github api
          curl_post="curl -sXPOST -H \"Content-Type: application/json\" -H \"Authorization: token $GIT_TOKEN\" --data '$curl_data' https://api.github.com/repos/mathew-fleisch/discord-loudbot/releases"
          echo "curl: "
          echo "$curl_post"
          release_response="$(eval $curl_post)"
          echo "Release Response: $release_response"
          echo "$release_response" | jq '.'
          # If the release was created, the json response will contain an id
          release_id=$(echo "$release_response" | jq -r '.id')
          echo "Release ID: $release_id"
          if [[ -n $release_id ]]; then
            echo "Login to container registries"
            echo "$GIT_TOKEN" | docker login https://docker.pkg.github.com -u mathew-fleisch --password-stdin
            echo "$REGISTRY_PASSWORD" | docker login ${REGISTRY_URL} -u="$REGISTRY_USERNAME" --password-stdin
            docker tag discord-loudbot-local ${REGISTRY_URL}/${REGISTRY_APPNAME}:${tag}
            docker tag discord-loudbot-local ${REGISTRY_URL}/${REGISTRY_APPNAME}:latest
            docker tag discord-loudbot-local docker.pkg.github.com/mathew-fleisch/discord-loudbot/discord-loudbot:${tag}
            docker tag discord-loudbot-local docker.pkg.github.com/mathew-fleisch/discord-loudbot/discord-loudbot:latest
            echo "Pushing docker container to registries"
            docker push ${REGISTRY_URL}/${REGISTRY_APPNAME}:${tag}
            docker push ${REGISTRY_URL}/${REGISTRY_APPNAME}:latest
            docker push docker.pkg.github.com/mathew-fleisch/discord-loudbot/discord-loudbot:${tag}
            docker push docker.pkg.github.com/mathew-fleisch/discord-loudbot/discord-loudbot:latest
            echo "Release complete: ${REGISTRY_URL}/${REGISTRY_APPNAME}:${tag}"
            exit 0
          else
            echo "Could not get release id from response. Skip upload and docker push."
            exit 1
          fi


